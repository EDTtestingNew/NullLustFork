
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// тест оновления модуля
	
	Движения.Взаиморасчеты.Записывать = Истина;
	Движения.Взаиморасчеты.Записать();
	
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Взаиморасчеты");
	ЭлементБлокировки.УстановитьЗначение("Контрагент", Контрагент);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Накладные;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Накладная", "Накладная");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходДенегНакладные.Накладная КАК Накладная
		|ПОМЕСТИТЬ ВТ_Накладыне
		|ИЗ
		|	Документ.ПриходДенег.Накладные КАК ПриходДенегНакладные
		|ГДЕ
		|	ПриходДенегНакладные.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Накладная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Накладыне.Накладная КАК Накладная,
		|	ВзаиморасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ВзаиморасчетыОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыОстатки.Контрагент.Представление КАК КонтрагентПредставление
		|ИЗ
		|	ВТ_Накладыне КАК ВТ_Накладыне
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Взаиморасчеты.Остатки(
		|				&МоментВремени,
		|				Накладная В
		|						(ВЫБРАТЬ
		|							ВТ_Накладыне.Накладная КАК Накладная
		|						ИЗ
		|							ВТ_Накладыне КАК ВТ_Накладыне)
		|					И Контрагент = &Контрагент) КАК ВзаиморасчетыОстатки
		|		ПО ВТ_Накладыне.Накладная = ВзаиморасчетыОстатки.Накладная
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Накладыне.Накладная.МоментВремени
		|ИТОГИ
		|	СУММА(СуммаОстаток)
		|ПО
		|	Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКонтрагент.Следующий() Цикл
		Переплата = ВыборкаКонтрагент.СуммаОстаток - СуммаОплаты;
		Если Переплата < 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Превышение задолженности контрагента %1 на %2 руб. Переплаты не допустимы.",
				ВыборкаКонтрагент.КонтрагентПредставление, -Переплата);
			Сообщение.Сообщить();
			
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Выборка = ВыборкаКонтрагент.Выбрать();
		
		НужноСписать = СуммаОплаты;
		Пока Выборка.Следующий() И НужноСписать <> 0 Цикл
			Списываем = Мин(НужноСписать, Выборка.СуммаОстаток);
			Движение = Движения.Взаиморасчеты.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Накладная = Выборка.Накладная;
			Движение.Контрагент = Контрагент;
			Движение.Сумма = Списываем;
			
			НужноСписать = НужноСписать - Списываем;
		КонецЦикла;
	КонецЦикла; 
	
	
	// БУ 
	
	Движения.Управленческий.Записывать = Истина;
	Движения.Управленческий.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.Покупатели);
	ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконто.Контрагент, Контрагент);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УправленческийОстатки.Субконто2 КАК Договор,
		|	ЕСТЬNULL(УправленческийОстатки.СуммаВалОстаток, 0) КАК СуммаВал,
		|	УправленческийОстатки.СуммаВалОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК СуммаРуб,
		|	УправленческийОстатки.Субконто1.Представление КАК КонтрагентПредставление,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК Курс
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(&МоментВремени, Счет = &СчетПокупатели, &МассивСубконто, Субконто1 = &Контрагент) КАК УправленческийОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|		ПО УправленческийОстатки.Субконто2.Валюта = КурсыВалютСрезПоследних.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	УправленческийОстатки.СуммаРубОстаток УБЫВ
		|ИТОГИ
		|	СУММА(СуммаРуб)
		|ПО
		|	УправленческийОстатки.Субконто1";
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагент);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Договор);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СчетПокупатели", ПланыСчетов.Управленческий.Покупатели);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Переплата = СуммаОплаты - ВыборкаИтоги.СуммаРуб;
		Если Переплата > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Превышение задолженности контрагента %1 на %2",
				ВыборкаИтоги.КонтрагентПредставление, Переплата);
			Сообщение.Сообщить();
			
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		Выборка = ВыборкаИтоги.Выбрать();
		
		НужноСписать = СуммаОплаты;
		Пока Выборка.Следующий() И НужноСписать <> 0 Цикл
			Списываем = Мин(НужноСписать, Выборка.СуммаРуб);
			Движение = Движения.Управленческий.Добавить();
			Движение.Период = Дата;
			Движение.СчетДт = ПланыСчетов.Управленческий.Касса;
			
			Движение.СчетКт = ПланыСчетов.Управленческий.Покупатели;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Контрагент;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Договор] = Выборка.Договор;
			
			Если Списываем = Выборка.СуммаРуб Тогда
				Движение.СуммаВалКт = Выборка.СуммаВал;
			Иначе
				Движение.СуммаВалКт = Списываем / Выборка.Курс;
			КонецЕсли;
			
            Движение.СуммаРуб = Списываем;
			
			НужноСписать = НужноСписать - Списываем;

		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры
