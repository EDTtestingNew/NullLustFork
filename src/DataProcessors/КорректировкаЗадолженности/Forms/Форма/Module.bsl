
&НаСервереБезКонтекста
Процедура СкорректироватьЗадолженностьНаСервере()
	
	Дата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
		ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.Покупатели);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УправленческийОстатки.Субконто1 КАК Контрагент,
		|	УправленческийОстатки.Субконто2 КАК Договор,
		|	УправленческийОстатки.СуммаРубОстаток КАК СуммаРубОстаток,
		|	УправленческийОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
		|	УправленческийОстатки.СуммаВалОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК СуммаВалВРубляхТекущая,
		|	УправленческийОстатки.СуммаРубОстаток - УправленческийОстатки.СуммаВалОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК РазницаКурсов
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(&Дата, Счет = &СчетПокупатели, &МассивСубконто, ) КАК УправленческийОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|		ПО УправленческийОстатки.Субконто2.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	УправленческийОстатки.СуммаРубОстаток <> УправленческийОстатки.СуммаВалОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагент);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Договор);
		
		Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
		Запрос.УстановитьПараметр("СчетПокупатели", ПланыСчетов.Управленческий.Покупатели);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Корректировка задолженности не требуется";
			Сообщение.Сообщить();
			
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		НаборЗаписей = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
		
		НовыйДокумент = Документы.Операция.СоздатьДокумент();
		НовыйДокумент.Дата = Дата;
		НовыйДокумент.Записать();
		
		НаборЗаписей.Отбор.Регистратор.Установить(НовыйДокумент.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			Движение = НаборЗаписей.Добавить();
			Движение.Период = Дата; 
			Если Выборка.РазницаКурсов > 0 Тогда
				Движение.СчетДт = ПланыСчетов.Управленческий.ПрибылиУбытки;
				Движение.СчетКт = ПланыСчетов.Управленческий.Покупатели;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Выборка.Контрагент;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Договор] = Выборка.Договор;
				Движение.СуммаРуб = Выборка.РазницаКурсов;
			Иначе
				Движение.СчетКт = ПланыСчетов.Управленческий.ПрибылиУбытки;
				Движение.СчетДт = ПланыСчетов.Управленческий.Покупатели;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Выборка.Контрагент;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Договор] = Выборка.Договор;
				Движение.СуммаРуб = -Выборка.РазницаКурсов;
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьЗадолженность(Команда)
	СкорректироватьЗадолженностьНаСервере();
КонецПроцедуры
